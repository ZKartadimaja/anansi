1. B
2. B
3. C
4. C
5. B

6.
listOf(): Membuat daftar yang tidak dapat diubah (immutable). Setelah dibuat, Anda tidak dapat menambah, menghapus, atau memodifikasi elemen dalam daftar ini.
mutableListOf(): Membuat daftar yang dapat diubah (mutable). Anda dapat menambah, menghapus, atau memodifikasi elemen dalam daftar ini setelah dibuat.

7.
suspend fun fetchData() {
    // Logika fungsi suspend
}

8. 
onPause() dipanggil ketika sebuah aktivitas terhalang sebagian oleh aktivitas lain atau ketika pengguna berpindah dari aktivitas, tetapi aktivitas masih terlihat (misalnya, di dalam dialog).

9. 
IDK

10.
Room adalah pustaka persistensi yang menyediakan lapisan abstraksi di atas SQLite untuk memungkinkan akses database yang lebih robust sambil memanfaatkan kekuatan penuh SQLite.

11.
IDK

12.
onCreate() adalah metode pertama yang dipanggil ketika sebuah aktivitas dibuat. Ini digunakan untuk menginisialisasi aktivitas, menyiapkan antarmuka pengguna (melalui setContentView()), dan menginisialisasi komponen (seperti tampilan dan data). 

13. 
LiveData adalah kelas penyimpan data yang menyadari siklus hidup yang memungkinkan komponen UI mengamati perubahan data. 

14.
IDK

15.
Kode yang Disederhanakan: Coroutine memungkinkan penulisan kode asinkron dengan cara yang berurutan, membuatnya lebih mudah dibaca.
Ringan: Coroutine lebih ringan dibandingkan dengan thread, memungkinkan ribuan coroutine berjalan tanpa overhead yang signifikan.

16. No
17. Yes
18. Yes
19. Yes
20. No

21.
val myList = mutableListOf(1, 2, 3)
myList.add(4)

22.
IDK

23. 
val map = mutableMapOf(1 to "One", 2 to "Two")
map[3] = "Three"

24.
val intent = Intent(this@CurrentActivity, SecondActivity::class.java)
startActivity(intent)

25.
val view = findViewById<Button>(R.id.myButton)
view.setOnClickListener {
    Toast.makeText(this, "Button clicked", Toast.LENGTH_SHORT).show()
}

26.
fun add(a: Int, b: Int): Int {
    return a + b
}

val result = add(5, 10)

27.
override fun onSaveInstanceState(outState: Bundle) {
    outState.putInt("KEY", 1)
}

override fun onRestoreInstanceState(savedInstanceState: Bundle) {
    val key = savedInstanceState.getInt("KEY")
}

28.
val textView = findViewById<TextView>(R.id.textView)
textView.text = getString(R.string.app_name)

29.
val job = GlobalScope.async {
        delay(1000L)
        "Hello"
    }

    val result = job.await()

30.
fun networkRequest() {
    val url = URL("https://example.com")
    val connection = url.openConnection() as HttpURLConnection
    connection.requestMethod = "POST" 
}

STORY
31. 
IDK



